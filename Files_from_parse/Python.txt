/@! 1 /@! Знакомство с Python /@! Как вывести в консоль с помощью функции print ? /@!
В аргументе функции print указывается необходимая для вывода в консоль фраза. Например:
print('Hello') # причем одинарные или двойные кавыячки не имеет значения
Результат: Hello
-------------------/@!
/@! 2 /@! Знакомство с Python /@! Как запустить IDLE Python в консоли ? /@!
необходимо в командной строке набрать python3
Результат: 
Python 3.10.12 (main, Jun 11 2023, 05:26:28) [GCC 11.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>>
-------------------/@!
/@! 3 /@! Знакомство с Python /@! Что по умолчанию является разделителем при выводе нескольких аргументов через функцию print ?/@!
по умолчанию разделителем между аргументами в функции print является пробел
Например:
>>> print("hello",2,"Valentin")
hello 2 Valentin
Чтобы указать любой другой разделитель необходимо указать в аргументе функции print через ключевое слово sep требуемый разделитель
Например:
>>> print("hello",2,"Valentin", sep='|||')
Результат: 
hello|||2|||Valentin
-------------------/@!
/@! 4 /@! Знакомство с Python /@! Что по умолчанию является символом окончания строки при выводе через функцию print ?/@!
по умолчанию символом окончания строки при выводе через функцию  print является перенос на новую строку
чтобы изменить это поведение необходимо набрать в аргументе функции print ключевое слово end и указать требуемый знак окончания строки
Например:
name_1 = 'Artyom'
name_2 = 'Valentin'
print(name_1)
print(name_2)

Результат:

Artyom
Valentin

# при указании в аргументе end="+" получим другой результат:
print(name_1, end='+')
print(name_2)

Результат:

Artyom+Valentin
-------------------/@!
/@! 5 /@! Знакомство с Python /@! как работает символ экранирования в последовательностях ?/@!
символ обратного слеша является экранирующим и может экранировать например кавычки, если нам нужно их использовать как обычный символ для вывода на печать
Например:
print('экранирование одинарной кавычки\'')
Результат:
экранирование одинарной кавычки'
-------------------/@!
/@! 6 /@! Знакомство с Python /@! как сочетать одинарные и двойные кавычки, чтоб не использовать экранирующие последовательности ?/@!
Если необходимо напечатать цитату, то саму строку лучше выводить в одинарных кавычках, при этом заключая саму цитату в двойные 
Например:
print('есть хорошая цитата - "Лес рубят - щепки летят!"')
Результат:
есть хорошая цитата - "Лес рубят - щепки летят!"
Второй вариант - используя экранирующие послеловательности:
print("есть хорошая цитата - \"Лес рубят - щепки летят!\"")
Результат будет такой-же
-------------------/@!
/@! 7 /@! Знакомство с Python /@! Продемонстрируйте несколько примеров с использованием экранирующих последовательностей /@!
Например:
Применим последовательность \n для переноса на новую строкуи \t для применения табуляции

print("Раз \n \t два \n \t\t горе не беда")

Результат:

Раз 
         два 
                 горе не беда
-------------------/@!

/@! 8 /@! Знакомство с Python /@! Как можно узнать тип данных того или иного объекта ? /@!
Общий синтаксис: type(Объект_для_которого_нужно_узнать_тип_данных)
a = 5
b = 'name'
c = True
d = 1.5
print(type(a),type(b),type(c),type(d))
Результат:
<class 'int'> <class 'str'> <class 'bool'> <class 'float'>
-------------------/@!

/@! 9 /@! Знакомство с Python /@! Как в Python работает приведение типов ? /@!

Общий синтаксис:
	Переменная_результат = тип_к_которому_осущ_приведение(приводимый_объект)
Например:
	a_int = 5
b_str = 'name'
c_bool = True
d_float = 1.5

a_str = str(a_int)
c_int = int(c_bool)
d_str = str(d_float)
print(a_str, c_int, d_str)

Результат:
	5 1 1.5
Вместе с тем при попытке привести строку к целочисленному значению получим ошибку
Например:
	b_str = 'name'
	print(int(b_str))
Результат:
	ValueError: invalid literal for int() with base 10: 'name'
-------------------/@!


/@! 10 /@! Знакомство с Python /@! Опишите принцип работы конструкции условного выражения if elif else ? /@!
Общий синтаксис:
	if условие:
	    действие в случае выполнения условия
 	elif альтернативное_условие:
	    действие в случае выполнения альтернативного условия
	else:
	    действие в случае, если не выполнено ни одно из условий
Например:
a = 5
b = 10
c = 15
if a > 10:
    print(a)
elif b < 10:
    print(b)
else:
    print(c)
Результат:
15
-------------------/@!
/@! 11 /@! Знакомство с Python /@! Продемонстрируйте работу цикла for i in range() ? /@!
Цикл for i in range()
Общий синтаксис:
	for i in range(start, stop, step):
		тело цикла
цикл будет выполняться до тех пор, пока значение итерируемой переменной меньше значения stop 
по умолчанию начальное значение итерируемой переменной равно 0, а шаг равен единице
Например:
	for i in range(5):
   	 	print(i) 
Результат:
	0
	1
	2	
	3
	4
-------------------/@!
/@! 12 /@! Знакомство с Python /@! Как осуществить перебор в обратном порядке с помощью цикла for i in range() ? /@!
Необходимо указать начальное значение большим, чем конечное и шаг цикла с отрицательным значение
Например:
for i in range(10, 5, -1):
    print(i)

Результат:
	10
	9
	8
	7
	6
-------------------/@!
/@! 13 /@! Знакомство с Python /@! Как осуществить перебор в цикле итерируемого объекта ? /@!
Перебор осуществляется в любом итерируемом объекте (строка, список, кортеж, множество, и т.д.)
Например:
word = 'apple'

fruits = ['apple', 'lemon', 'orange', 'ananas']

set_avto = {'avto', 'car', 'moto', 'velo'}

for i in word:
    print(i)

for i in fruits:
    print(i)

for i in set_avto:
    print(i)

Результат:
a
p
p
l
e
apple
lemon
orange
ananas
avto
car
moto
velo
-------------------/@!
/@! 14 /@! Знакомство с Python /@! Как работает цикл while ? /@!
Общий синтаксис цикла while:

	while условие_выполнения:
		тело цикла
до тех пор пока истинное условие цикла тело цикла будет выполняться
Пример бесконечного цикла:
	flag = True
while flag:
    print('условие выполняется')
    flag = int(input("для завершения бесконечного цикла введите значение отличное от 1"))
print('я завершился')
-------------------/@!
/@! 15 /@! Знакомство с Python /@! Как создать пустой список и вывести на экран его и  его тип ? /@!

ls = []
print(ls)
print(type(ls))

Результат:

[]
<class 'list'>

-------------------/@!
/@! 16 /@! Знакомство с Python /@! Как добавить в список значения (попробуйте с разными типами данных) ? /@!

ls = []
ls.append(5)
ls.append('hello')
ls.append(True)
ls.append([1,2,3])
print('в список можно добавлять данные разных типов: ', ls)

Результат: 
	в список можно добавлять данные разных типов:  [5, 'hello', True, [1, 2, 3]]

-------------------/@!
/@! 17 /@! Знакомство с Python /@! Как работает функция extend в списках ? /@!
функция extend в списках позволяет добавить в конец списка еще один список

ls = ['a', 'b', 'c']
ls_2 = [1, 2, 3]
ls.extend(ls_2)
print(ls)

-------------------/@!
/@! 18 /@! Знакомство с Python /@! Как работает метод join для склеивания списков ? /@!
С помощью метода join можной "склеить" данные, указанные в списке в единую строку, используя определенный разделитель
Например:
ls = ['a', 'b', 'c']
ls_join = '+'.join(ls)
print(ls_join)

Результат:
	a+b+c
	
-------------------/@!
/@! 19 /@! Знакомство с Python /@! Как работает метод split для разделения строки в список ? /@!
fruits_str = 'apple|orange|lemon|ananas'
fruits_ls = fruits_str.split('|')   #разделение в список по указанному знаку разделителя
print(fruits_ls)
Результат:
	['apple', 'orange', 'lemon', 'ananas']
	
-------------------/@!
/@! 20 /@! Знакомство с Python /@! Чем работа метода rsplit отличается от метода split ? /@!
Метод rsplit позволяет разделить строку начиная с права, при этом можно указать в необязательном параметре количество разделений
Например:
fruits_str = 'apple|orange|lemon|ananas'
fruits_ls = fruits_str.rsplit('|', 2)
print(fruits_ls)

Результат:

['apple|orange', 'lemon', 'ananas']

-------------------/@!
/@! 21 /@! Знакомство с Python /@! Как работает функция count в списках ? /@!
Проверяет количество вхождений указанного элемента в список

Например:
fruits = ['apple', 'orange', 'lemon', 'ananas']
print(fruits.count('apple'))   #  1

Результат:
	1
-------------------/@!
/@! 22 /@! Знакомство с Python /@! Как работает функция index в списках ? /@!

Возвращает индекс первого вхождения указанного в аргументе элемента в список

Например:
fruits = ['apple', 'orange', 'lemon', 'ananas']
print(fruits.index('orange'))  

Результат:
	1
-------------------/@!
/@! 23 /@! Знакомство с Python /@! Как работает функция insert в списках ? /@!

Добавляет указанный в одном из аргументов элемент перед позицией указанной в аргументе

Например:
fruits = ['apple', 'orange', 'lemon', 'ananas']
fruits.insert(1, 'strawberry')  # вставка нового значения перед указанным индексом
print(fruits)

Результат:
['apple', 'strawberry', 'orange', 'lemon', 'ananas']

------------------/@!
/@! 23 /@! Знакомство с Python /@! Как работает метод pop в списках ? /@!

fruits = ['apple', 'orange', 'lemon', 'ananas']
last_fruit = fruits.pop() # удаление с одновременным извлечением последнего элемента списка 
print(last_fruit)
print(fruits)
fruit_pozition_pop = fruits.pop(1)  # удаление с одновременным извлечением элемента списка c указанным индексом
print(fruit_pozition_pop)

------------------/@!
/@! 23 /@! Знакомство с Python /@! Как работает метод pop в списках ? /@!


